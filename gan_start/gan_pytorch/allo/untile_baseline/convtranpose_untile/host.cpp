//=============================================================================
// Auto generated by Allo
//=============================================================================

// OpenCL utility layer include
#include "xcl2.hpp"
#include <algorithm>
#include <cstdio>
#include <random>
#include <vector>
#include <iomanip>
#include <fstream>

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cout << "Usage: " << argv[0] << " <XCLBIN File>" << std::endl;
        return EXIT_FAILURE;
    }

    std::string binaryFile = argv[1];
    cl_int err;
    cl::CommandQueue q;
    cl::Context context;
    cl::Program program;

    cl::Kernel krnl_top;

    // Calculate correct buffer sizes based on the dimensions in the Python test
    const int BATCH_SIZE = 8;
    const int IN_CHANNELS = 32;
    const int OUT_CHANNELS = 16;
    const int INPUT_HEIGHT = 32;
    const int INPUT_WIDTH = 32;
    const int KERNEL_SIZE = 4;
    const int OUTPUT_HEIGHT = 64;  // stride*(height-1)+kernel-2*padding = 2*(32-1)+4-2 = 64
    const int OUTPUT_WIDTH = 64;   // stride*(width-1)+kernel-2*padding = 2*(32-1)+4-2 = 64

    // Calculate total elements for each buffer
    const int input_size = BATCH_SIZE * IN_CHANNELS * INPUT_HEIGHT * INPUT_WIDTH;    // 8*32*32*32 = 262144
    const int weights_size = IN_CHANNELS * OUT_CHANNELS * KERNEL_SIZE * KERNEL_SIZE; // 32*16*4*4 = 8192
    const int bias_size = OUT_CHANNELS;                                              // 16
    const int output_size = BATCH_SIZE * OUT_CHANNELS * OUTPUT_HEIGHT * OUTPUT_WIDTH;// 8*16*64*64 = 524288

    // Allocate Memory in Host Memory
    std::ifstream ifile0("input0.data");
    if (!ifile0.is_open()) {
      std::cerr << "Error: Could not open input file.\n";
      return 1;
    }
    std::vector<float, aligned_allocator<float>> source_in0(input_size);
    for (unsigned i = 0; i < input_size; i++) {
      if (!(ifile0 >> source_in0[i])) {
        std::cerr << "Error: Not enough data in input0.data (expected " << input_size << " values)\n";
        return 1;
      }
    }
    size_t size_bytes_in0 = sizeof(float) * input_size;
    
    std::ifstream ifile1("input1.data");
    if (!ifile1.is_open()) {
      std::cerr << "Error: Could not open input file.\n";
      return 1;
    }
    std::vector<float, aligned_allocator<float>> source_in1(weights_size);
    for (unsigned i = 0; i < weights_size; i++) {
      if (!(ifile1 >> source_in1[i])) {
        std::cerr << "Error: Not enough data in input1.data (expected " << weights_size << " values)\n";
        return 1;
      }
    }
    size_t size_bytes_in1 = sizeof(float) * weights_size;
    
    std::ifstream ifile2("input2.data");
    if (!ifile2.is_open()) {
      std::cerr << "Error: Could not open input file.\n";
      return 1;
    }
    std::vector<float, aligned_allocator<float>> source_in2(bias_size);
    for (unsigned i = 0; i < bias_size; i++) {
      if (!(ifile2 >> source_in2[i])) {
        std::cerr << "Error: Not enough data in input2.data (expected " << bias_size << " values)\n";
        return 1;
      }
    }
    size_t size_bytes_in2 = sizeof(float) * bias_size;
    
    // Directly allocate output buffer with zeros
    size_t size_bytes_in3 = sizeof(float) * output_size;
    std::vector<float, aligned_allocator<float>> source_in3(output_size, 0.0f);

    // OPENCL HOST CODE AREA START
    auto devices = xcl::get_xil_devices();
    auto fileBuf = xcl::read_binary_file(binaryFile);
    cl::Program::Binaries bins{{fileBuf.data(), fileBuf.size()}};
    bool valid_device = false;
    for (unsigned int i = 0; i < devices.size(); i++) {
        auto device = devices[i];
        // Creating Context and Command Queue for selected Device
        OCL_CHECK(err, context = cl::Context(device, nullptr, nullptr, nullptr, &err));
        OCL_CHECK(err, q = cl::CommandQueue(context, device, CL_QUEUE_PROFILING_ENABLE, &err));
        std::cout << "Trying to program device[" << i << "]: " << device.getInfo<CL_DEVICE_NAME>() << std::endl;
        cl::Program program(context, {device}, bins, nullptr, &err);
        if (err != CL_SUCCESS) {
            std::cout << "Failed to program device[" << i << "] with xclbin file!\n";
        } else {
            std::cout << "Device[" << i << "]: program successful!\n";
            OCL_CHECK(err, krnl_top = cl::Kernel(program, "top", &err));
            valid_device = true;
            break; // we break because we found a valid device
        }
    }
    if (!valid_device) {
        std::cout << "Failed to program any device found, exit!\n";
        exit(EXIT_FAILURE);
    }
    
    // Allocate Buffer in Global Memory
    OCL_CHECK(err, cl::Buffer buffer_in0(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in0, source_in0.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in1(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in1, source_in1.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in2(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in2, source_in2.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in3(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, size_bytes_in3, source_in3.data(), &err));

    OCL_CHECK(err, err = krnl_top.setArg(0, buffer_in0));
    OCL_CHECK(err, err = krnl_top.setArg(1, buffer_in1));
    OCL_CHECK(err, err = krnl_top.setArg(2, buffer_in2));
    OCL_CHECK(err, err = krnl_top.setArg(3, buffer_in3));
    // Copy input data to device global memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_in0, buffer_in1, buffer_in2, buffer_in3}, 0 /* 0 means from host*/));

    cl::Event event;
    uint64_t nstimestart, nstimeend;
    std::cout << "|-------------------------+-------------------------|\n"
              << "| Kernel                  |    Wall-Clock Time (ns) |\n"
              << "|-------------------------+-------------------------|\n";

    // Launch the Kernel
    OCL_CHECK(err, err = q.enqueueTask(krnl_top, nullptr, &event));

    // Copy Result from Device Global Memory to Host Local Memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_in3}, CL_MIGRATE_MEM_OBJECT_HOST));
    q.finish();
    // OpenCL Host Code Ends

    // Get the execution time
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_START, &nstimestart));
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_END, &nstimeend));
    auto exe_time = nstimeend - nstimestart;

    std::cout << "| " << std::left << std::setw(24) << "top "
              << "|" << std::right << std::setw(24) << exe_time << " |\n";
    std::cout << "|-------------------------+-------------------------|\n";
    std::cout << "Note: Wall Clock Time is meaningful for real hardware execution "
              << "only, not for emulation.\n";
    std::cout << "Please refer to profile summary for kernel execution time for "
              << "hardware emulation.\n";
    std::cout << "Finished execution!\n\n";

    // Print some debugging information
    std::cout << "Input dimensions: " << BATCH_SIZE << "x" << IN_CHANNELS << "x" << INPUT_HEIGHT << "x" << INPUT_WIDTH << std::endl;
    std::cout << "Output dimensions: " << BATCH_SIZE << "x" << OUT_CHANNELS << "x" << OUTPUT_HEIGHT << "x" << OUTPUT_WIDTH << std::endl;
    std::cout << "Total output elements: " << output_size << std::endl;

    // Write the output data to file
    std::ofstream ofile;
    ofile.open("output.data");
    if (!ofile) {
        std::cerr << "Failed to open output file!" << std::endl;
        return EXIT_FAILURE;
    }
    for (unsigned i = 0; i < source_in3.size(); i++) {
        ofile << source_in3[i] << std::endl;
    }
    ofile.close();
    
    return EXIT_SUCCESS;
}